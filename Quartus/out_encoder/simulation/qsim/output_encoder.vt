// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/27/2018 12:21:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    output_encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module output_encoder_vlg_sample_tst(
	clk,
	RST,
	Start_TX,
	Time,
	TX_Ready,
	sampler_tx
);
input  clk;
input  RST;
input  Start_TX;
input [15:0] Time;
input  TX_Ready;
output sampler_tx;

reg sample;
time current_time;
always @(clk or RST or Start_TX or Time or TX_Ready)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module output_encoder_vlg_check_tst (
	D_Out,
	End_TX,
	WR,
	sampler_rx
);
input [7:0] D_Out;
input  End_TX;
input  WR;
input sampler_rx;

reg [7:0] D_Out_expected;
reg  End_TX_expected;
reg  WR_expected;

reg [7:0] D_Out_prev;
reg  End_TX_prev;
reg  WR_prev;

reg [7:0] D_Out_expected_prev;
reg  End_TX_expected_prev;
reg  WR_expected_prev;

reg [7:0] last_D_Out_exp;
reg  last_End_TX_exp;
reg  last_WR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	D_Out_prev = D_Out;
	End_TX_prev = End_TX;
	WR_prev = WR;
end

// update expected /o prevs

always @(trigger)
begin
	D_Out_expected_prev = D_Out_expected;
	End_TX_expected_prev = End_TX_expected;
	WR_expected_prev = WR_expected;
end


// expected D_Out[ 7 ]
initial
begin
	D_Out_expected[7] = 1'bX;
end 
// expected D_Out[ 6 ]
initial
begin
	D_Out_expected[6] = 1'bX;
end 
// expected D_Out[ 5 ]
initial
begin
	D_Out_expected[5] = 1'bX;
end 
// expected D_Out[ 4 ]
initial
begin
	D_Out_expected[4] = 1'bX;
end 
// expected D_Out[ 3 ]
initial
begin
	D_Out_expected[3] = 1'bX;
end 
// expected D_Out[ 2 ]
initial
begin
	D_Out_expected[2] = 1'bX;
end 
// expected D_Out[ 1 ]
initial
begin
	D_Out_expected[1] = 1'bX;
end 
// expected D_Out[ 0 ]
initial
begin
	D_Out_expected[0] = 1'bX;
end 

// expected WR
initial
begin
	WR_expected = 1'bX;
end 

// expected End_TX
initial
begin
	End_TX_expected = 1'bX;
end 
// generate trigger
always @(D_Out_expected or D_Out or End_TX_expected or End_TX or WR_expected or WR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D_Out = %b | expected End_TX = %b | expected WR = %b | ",D_Out_expected_prev,End_TX_expected_prev,WR_expected_prev);
	$display("| real D_Out = %b | real End_TX = %b | real WR = %b | ",D_Out_prev,End_TX_prev,WR_prev);
`endif
	if (
		( D_Out_expected_prev[0] !== 1'bx ) && ( D_Out_prev[0] !== D_Out_expected_prev[0] )
		&& ((D_Out_expected_prev[0] !== last_D_Out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[0] = D_Out_expected_prev[0];
	end
	if (
		( D_Out_expected_prev[1] !== 1'bx ) && ( D_Out_prev[1] !== D_Out_expected_prev[1] )
		&& ((D_Out_expected_prev[1] !== last_D_Out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[1] = D_Out_expected_prev[1];
	end
	if (
		( D_Out_expected_prev[2] !== 1'bx ) && ( D_Out_prev[2] !== D_Out_expected_prev[2] )
		&& ((D_Out_expected_prev[2] !== last_D_Out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[2] = D_Out_expected_prev[2];
	end
	if (
		( D_Out_expected_prev[3] !== 1'bx ) && ( D_Out_prev[3] !== D_Out_expected_prev[3] )
		&& ((D_Out_expected_prev[3] !== last_D_Out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[3] = D_Out_expected_prev[3];
	end
	if (
		( D_Out_expected_prev[4] !== 1'bx ) && ( D_Out_prev[4] !== D_Out_expected_prev[4] )
		&& ((D_Out_expected_prev[4] !== last_D_Out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[4] = D_Out_expected_prev[4];
	end
	if (
		( D_Out_expected_prev[5] !== 1'bx ) && ( D_Out_prev[5] !== D_Out_expected_prev[5] )
		&& ((D_Out_expected_prev[5] !== last_D_Out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[5] = D_Out_expected_prev[5];
	end
	if (
		( D_Out_expected_prev[6] !== 1'bx ) && ( D_Out_prev[6] !== D_Out_expected_prev[6] )
		&& ((D_Out_expected_prev[6] !== last_D_Out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[6] = D_Out_expected_prev[6];
	end
	if (
		( D_Out_expected_prev[7] !== 1'bx ) && ( D_Out_prev[7] !== D_Out_expected_prev[7] )
		&& ((D_Out_expected_prev[7] !== last_D_Out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_Out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_Out_expected_prev);
		$display ("     Real value = %b", D_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_Out_exp[7] = D_Out_expected_prev[7];
	end
	if (
		( End_TX_expected_prev !== 1'bx ) && ( End_TX_prev !== End_TX_expected_prev )
		&& ((End_TX_expected_prev !== last_End_TX_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port End_TX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", End_TX_expected_prev);
		$display ("     Real value = %b", End_TX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_End_TX_exp = End_TX_expected_prev;
	end
	if (
		( WR_expected_prev !== 1'bx ) && ( WR_prev !== WR_expected_prev )
		&& ((WR_expected_prev !== last_WR_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WR_expected_prev);
		$display ("     Real value = %b", WR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_WR_exp = WR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module output_encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg RST;
reg Start_TX;
reg [15:0] Time;
reg TX_Ready;
// wires                                               
wire [7:0] D_Out;
wire End_TX;
wire WR;

wire sampler;                             

// assign statements (if any)                          
output_encoder i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.D_Out(D_Out),
	.End_TX(End_TX),
	.RST(RST),
	.Start_TX(Start_TX),
	.\Time (Time),
	.TX_Ready(TX_Ready),
	.WR(WR)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #20000 1'b1;
end 
// \Time [ 15 ]
initial
begin
	Time[15] = 1'b0;
	Time[15] = #50000 1'b1;
end 
// \Time [ 14 ]
initial
begin
	Time[14] = 1'b0;
end 
// \Time [ 13 ]
initial
begin
	Time[13] = 1'b0;
	Time[13] = #50000 1'b1;
end 
// \Time [ 12 ]
initial
begin
	Time[12] = 1'b0;
end 
// \Time [ 11 ]
initial
begin
	Time[11] = 1'b0;
end 
// \Time [ 10 ]
initial
begin
	Time[10] = 1'b0;
	Time[10] = #50000 1'b1;
end 
// \Time [ 9 ]
initial
begin
	Time[9] = 1'b0;
end 
// \Time [ 8 ]
initial
begin
	Time[8] = 1'b0;
end 
// \Time [ 7 ]
initial
begin
	Time[7] = 1'b0;
	Time[7] = #50000 1'b1;
end 
// \Time [ 6 ]
initial
begin
	Time[6] = 1'b0;
	Time[6] = #50000 1'b1;
end 
// \Time [ 5 ]
initial
begin
	Time[5] = 1'b0;
	Time[5] = #50000 1'b1;
end 
// \Time [ 4 ]
initial
begin
	Time[4] = 1'b0;
end 
// \Time [ 3 ]
initial
begin
	Time[3] = 1'b0;
end 
// \Time [ 2 ]
initial
begin
	Time[2] = 1'b0;
end 
// \Time [ 1 ]
initial
begin
	Time[1] = 1'b0;
	Time[1] = #50000 1'b1;
end 
// \Time [ 0 ]
initial
begin
	Time[0] = 1'b0;
	Time[0] = #50000 1'b1;
end 

// TX_Ready
initial
begin
	TX_Ready = 1'b0;
	TX_Ready = #80000 1'b1;
	TX_Ready = #860000 1'b0;
end 

// Start_TX
initial
begin
	Start_TX = 1'b0;
	Start_TX = #50000 1'b1;
	Start_TX = #10000 1'b0;
end 

output_encoder_vlg_sample_tst tb_sample (
	.clk(clk),
	.RST(RST),
	.Start_TX(Start_TX),
	.Time(Time),
	.TX_Ready(TX_Ready),
	.sampler_tx(sampler)
);

output_encoder_vlg_check_tst tb_out(
	.D_Out(D_Out),
	.End_TX(End_TX),
	.WR(WR),
	.sampler_rx(sampler)
);
endmodule

